#!/bin/bash

trap "echo Exited!; exit 1;" SIGINT SIGTERM

BIN_DIR=$( cd "$( dirname "$0" )" && pwd )
TEST_TYPE=${1-everything}
echo "Running Test Type: $TEST_TYPE"

pushd $BIN_DIR/../src/github.com/coreos/etcd
  ORG_PATH="github.com/coreos"
  REPO_PATH="${ORG_PATH}/etcd"
  export ETCD_GOPATH=${PWD}/gopath

  rm -f $ETCD_GOPATH/src/${REPO_PATH}
  mkdir -p $ETCD_GOPATH/src/${ORG_PATH}
  ln -s ${PWD} $ETCD_GOPATH/src/${REPO_PATH}

  eval $(go env)

  GIT_SHA=`git rev-parse --short HEAD || echo "GitNotFound"`

  # Static compilation is useful when etcd is run in a container
  GOPATH=$ETCD_GOPATH CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-s -X ${REPO_PATH}/version.GitSHA=${GIT_SHA}" -o bin/etcd ${REPO_PATH}
  GOPATH=$ETCD_GOPATH CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-s" -o bin/etcdctl ${REPO_PATH}/etcdctl
popd

mv $BIN_DIR/../src/github.com/coreos/etcd/bin/etcd $BIN_DIR/etcd

export PATH=$PATH:$BIN_DIR
export GORACE="halt_on_error=1"

goveralls=$(which goveralls)
if [[ -e "${BIN_DIR}/goveralls" ]]
then
    goveralls="${BIN_DIR}/goveralls"
fi

rm -rf ./pkg

result=0

function green {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 2)$1$(tput sgr0)"
    else
        echo ":) $1"
    fi
}

function red {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 1)$1$(tput sgr0)"
    else
        echo ":( $1"
    fi
}

function bold_blue {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 6; tput bold)$1$(tput sgr0)"
    else
        echo "$1"
    fi
}

not_unit_tests="github.com,golang.org,gopkg.in,integration_tests,lats"

if [ $TEST_TYPE == "unit" ] || [ $TEST_TYPE == "everything" ]
then
  bold_blue "==================================  Running Unit Tests  =================================="
  ginkgo -r --race -skipMeasurements --randomizeAllSpecs --cover --skipPackage="${not_unit_tests}" $1 src
  result=$?
fi

if [ $TEST_TYPE == "integration" ] || [ $TEST_TYPE == "everything" ]
then
  bold_blue "==================================  Running Integration Tests  =================================="
  ginkgo -r --race -skipMeasurements --randomizeAllSpecs --cover -skipPackage="integration_tests/statsd-injector" $1 src/integration_tests
  result=$((result + $?))
fi

fmtable_dirs=$(ls -1 src | grep -v "github.com")

for dir in "${fmtable_dirs}"
do
    if go list $dir > /dev/null 2>&1
    then
        echo -e "\n Fmting $package"
        go fmt $dir/...
        echo -e "\n Vetting $package"
        go vet $dir/...
        result=$((result + $?))
        echo -e "\n Checking that $package compiles"
        go install $dir
    fi
done

if [ $result -eq 0 ]; then
    green "\nSUITE SUCCESS"
    if [[ ! -z "$goveralls" && ! -z "$COVERALLS_TOKEN" ]]
    then
        green "\nWriting cover profile to coveralls.io"
        echo "mode: set" > all.coverprofile
        find . -iname "*.coverprofile" -exec grep -v mode: {} >> all.coverprofile \;
        $goveralls -coverprofile=all.coverprofile -repotoken=$COVERALLS_TOKEN -service=concourse
    fi
else
    red "\nSUITE FAILURE"
fi

exit $result
