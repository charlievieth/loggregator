#!/bin/bash -l

set -e

export TIME="<%= p('loggregator_load_testing.time') %>"
export ORG="<%= p('loggregator_load_testing.org') %>"
export SPACE="<%= p('loggregator_load_testing.space') %>"
export API_URL="<%= p('loggregator_load_testing.api_url') %>"
export CF_USERNAME="<%= p('loggregator_load_testing.username') %>"
export CF_PASSWORD="<%= p('loggregator_load_testing.password') %>"
export ROUTE_SCHEME="<%= p('loggregator_load_testing.route_scheme') %>"
export SKIP_CERT_VERIFY="<%= p('ssl.skip_cert_verify') %>"

export GOROOT=$(readlink -nf /var/vcap/packages/golang1.6)
export PACKAGES_DIR=/var/vcap/packages/loggregator-load-testing
export GOPATH=$PACKAGES_DIR
export PATH=${PACKAGES_DIR}/bin:${GOROOT}/bin:${PATH}

if [ "$SKIP_CERT_VERIFY" = "true" ]; then
  curl_skip_ssl="--insecure"
  cf_skip_ssl="--skip-ssl-validation"
fi

build() {
  local apps=(logcounterapp logemitter logfin)

  for app in ${apps[@]}; do
    pushd "$PACKAGES_DIR/src/tools/$app/build" > /dev/null
      ./build.sh
    popd > /dev/null
  done
}

cli_setup() {
  cd /var/vcap/jobs/loggregator-load-testing/config

  cf login -a "$API_URL" -u "$CF_USERNAME" -p "$CF_PASSWORD" -o "$ORG" -s "$SPACE" "$cf_skip_ssl"
}

start() {
  cf push logfin
  LOGFIN_URL=$ROUTE_SCHEME://$(cf app logfin | grep urls | awk '{print $2}')
  cf push logcounter --no-start
  cf set-env logcounter LOGFIN_URL $LOGFIN_URL
  cf start logcounter

  cf push logemitter --no-start
  cf set-env logemitter LOGFIN_URL $LOGFIN_URL
  cf set-env logemitter SKIP_CERT_VERIFY $SKIP_CERT_VERIFY
  cf start logemitter
}

block_until_done() {
  # Wait the minimum time before checking to see if everything is ready
  sleep $TIME

  while true; do
    status=`curl -s -o /dev/null -w "%{http_code}" $LOGFIN_URL/report $curl_skip_ssl`
    if [ "$status" = "200" ]; then
      break
    fi
    sleep 10s
  done
}

report() {
  finalReport=$(curl -s $LOGFIN_URL/report $curl_skip_ssl)

  echo -e "\033[38;5;145m"'   _   __   __  __    _____ ___  __ _____   ___ ___  __ _  _ _ _____  __    '"\033[0m"
  echo -e "\033[38;5;145m"'  | | /__\ /  \| _\  |_   _| __/  _|_   _| | _ | __/  _| || | |_   _/  _/   '"\033[0m"
  echo -e "\033[38;5;145m"'  | || \/ | /\ | v |   | | | _|`._`. | |   | v | _|`._`| \/ | |_| | `._`.   '"\033[0m"
  echo -e "\033[38;5;145m"'  |___\__/|_||_|__/    |_| |___|___/ |_|   |_|_|___|___/\__/|___|_| |___/   '"\033[0m"
  echo
  python <<EOF
import sys, json

js = json.loads('''$finalReport''')

print "\033[38;5;249m1008 errors:\033[31m", js["errors"]["1008"]
print "\033[38;5;249mOther errors:\033[31m", js["errors"]["other"]
for g, d in js["messages"].items():
    print "\033[38;5;249mguid:\033[38;5;59m", g, "\033[38;5;249mapp:\033[38;5;59m", d["app"], "\033[38;5;249mtotal:\033[38;5;59m", d["total"], "\033[38;5;249mmax:\033[38;5;59m", d["max"], "\033[0m"
EOF
  echo 
}

teardown() {
  cf delete -f logemitter
  cf delete -f logcounter
  cf delete -f logfin
}

echo starting build
build
echo done building
echo starting cli setup
cli_setup
echo done setting up cli
echo starting apps
start
echo done starting apps
echo waiting for test to complete
block_until_done
echo test completed
echo generating report
report
echo done reporting
echo tearing down apps
teardown
echo done
